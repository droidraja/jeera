/*
 * Teams Public API
 *
 * Teams Public API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`add_members2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddMembers2Error {
    Status400(models::PublicApiOverallCodedError),
    Status403(models::PublicApiOverallCodedError),
    Status404(models::PublicApiOverallCodedError),
    Status410(models::PublicApiOverallCodedError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_members`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchMembersError {
    Status400(models::PublicApiOverallCodedError),
    Status403(models::PublicApiOverallCodedError),
    Status404(models::PublicApiOverallCodedError),
    Status410(models::PublicApiOverallCodedError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_members1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveMembers1Error {
    Status400(models::PublicApiOverallCodedError),
    Status403(models::PublicApiOverallCodedError),
    Status404(models::PublicApiOverallCodedError),
    Status410(models::PublicApiOverallCodedError),
    UnknownValue(serde_json::Value),
}


/// The account IDs specified will be added to the team.
pub async fn add_members2(configuration: &configuration::Configuration, org_id: &str, team_id: &str, public_api_membership_add_payload: models::PublicApiMembershipAddPayload) -> Result<models::PublicApiMembershipAddResponse, Error<AddMembers2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}/members/add", local_var_configuration.base_path, orgId=crate::apis::urlencode(org_id), teamId=crate::apis::urlencode(team_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&public_api_membership_add_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddMembers2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a set of account IDs who are members of the team, alongside a pagination cursor to retrieve the next page (if available).
pub async fn fetch_members(configuration: &configuration::Configuration, org_id: &str, team_id: &str, site_id: Option<&str>, public_api_membership_fetch_payload: Option<models::PublicApiMembershipFetchPayload>) -> Result<models::PublicApiFetchResponsePublicApiMembershipAccountId, Error<FetchMembersError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}/members", local_var_configuration.base_path, orgId=crate::apis::urlencode(org_id), teamId=crate::apis::urlencode(team_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("siteId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&public_api_membership_fetch_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FetchMembersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The account IDs specified will be removed from the team.
pub async fn remove_members1(configuration: &configuration::Configuration, org_id: &str, team_id: &str, public_api_membership_remove_payload: models::PublicApiMembershipRemovePayload) -> Result<models::PublicApiMembershipRemoveResponse, Error<RemoveMembers1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}/members/remove", local_var_configuration.base_path, orgId=crate::apis::urlencode(org_id), teamId=crate::apis::urlencode(team_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&public_api_membership_remove_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RemoveMembers1Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

